# -*- coding: utf-8 -*-
"""Untitled3.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1WGNDAoKzWXqtd4C-gFu515zfWjfk4xBX
"""

# -*- coding: utf-8 -*-
"""STA 2101 - Milestone 02: Agriculture Crop Yield Dataset
Implementing Probability Sampling Methods in Python
"""

# -------------------------------
# Import Libraries
# -------------------------------
import pandas as pd
import numpy as np
from IPython.display import display

# -------------------------------
# Part A — Setup
# -------------------------------

# Load Dataset (Using the uploaded zip file)
file_path = 'crop_yield.csv.zip'
df = pd.read_csv(file_path)

print("\n✅ Dataset loaded successfully!\n")
display(df.head())

# Dataset Size
print("Dataset size (rows, columns):", df.shape)

# Population Mean (Using numerical column ‘Yield_tons_per_hectare’)
population_mean = df['Yield_tons_per_hectare'].mean()
print("Population Mean (Yield_tons_per_hectare):", population_mean)

# -------------------------------
# Part B — Simple Random Sampling
# -------------------------------
sample_size = 50  # sample size

srs = df.sample(n=sample_size, random_state=42)
display(srs.head())

srs_mean = srs['Yield_tons_per_hectare'].mean()
print("\nSimple Random Sampling Mean:", srs_mean)

# -------------------------------
# Part C — Systematic Sampling
# -------------------------------
n = 50
k = len(df) // n   # step size
start = np.random.randint(0, k)
sys_sample = df.iloc[start::k][:n]
display(sys_sample.head())

sys_mean = sys_sample['Yield_tons_per_hectare'].mean()
print("\nSystematic Sampling Mean:", sys_mean)

# -------------------------------
# Part D — Stratified Sampling
# -------------------------------
# Stratification variable is ‘Region’
strata_col = 'Region'
frac = sample_size / len(df)

# Stratified sample (proportional)
stratified_sample = df.groupby(strata_col, group_keys=False).sample(frac=frac, random_state=42)
display(stratified_sample.head())

strat_mean = stratified_sample['Yield_tons_per_hectare'].mean()
print("\nStratified Sampling Mean:", strat_mean)

# -------------------------------
# Part E — Cluster Sampling
# -------------------------------
# Dataset is divided into 10 clusters
df['cluster_id'] = df.index // (len(df)//10)

# Randomly select 2 clusters
selected_clusters = np.random.choice(df['cluster_id'].unique(), size=2, replace=False)
cluster_sample = df[df['cluster_id'].isin(selected_clusters)]
display(cluster_sample.head())

cluster_mean = cluster_sample['Yield_tons_per_hectare'].mean()
print("\nSelected Clusters:", selected_clusters)
print("Cluster Sampling Mean:", cluster_mean)

# -------------------------------
# Part F — Comparison & Reflection
# -------------------------------
comparison = pd.DataFrame({
    'Method': ['Simple Random', 'Systematic', 'Stratified', 'Cluster'],
    'Sample Mean': [srs_mean, sys_mean, strat_mean, cluster_mean],
    'Population Mean': [population_mean]*4,
    'Difference': [abs(srs_mean - population_mean),
                   abs(sys_mean - population_mean),
                   abs(strat_mean - population_mean),
                   abs(cluster_mean - population_mean)]
})

print("\n--- Comparison of Sampling Methods ---")
print(comparison)